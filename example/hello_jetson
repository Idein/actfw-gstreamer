#!/usr/bin/python3
from queue import Full
from PIL import Image, ImageDraw, ImageFont
import actfw_core
from actfw_gstreamer.jetson import Display
from actfw_core.task import Pipe, Consumer, Producer
from actfw_core.capture import Frame


(CAPTURE_WIDTH, CAPTURE_HEIGHT) = (1280, 720)
FPS = 120

class SingleColorCapture(Producer):
    """Single colored frame producer for any device"""

    def __init__(self, color_rgb=(128, 0, 0)):
        super(SingleColorCapture, self).__init__()
        self.color_rgb = color_rgb
        self.capture_size = (CAPTURE_WIDTH, CAPTURE_HEIGHT)
        self.frames = []

    def run(self):
        """Run producer activity"""
        while self._is_running():
            im = Image.new('RGB', self.capture_size, self.color_rgb)
            value = im.tobytes()
            updated = 0
            for frame in reversed(self.frames):
                if frame._update(value):
                    updated += 1
                else:
                    break

            self.frames = self.frames[len(self.frames) - updated:]
            frame = Frame(value)
            if self._outlet(frame):
                self.frames.append(frame)

    def _outlet(self, o):
        length = len(self.out_queues)
        while self._is_running():
            try:
                self.out_queues[self.out_queue_id].put(o, block=False)
                self.out_queue_id = (self.out_queue_id + 1) % length
                return True
            except Full:
                return False
            except:
                traceback.print_exc()
        return False


class Presenter(Consumer):

    def __init__(self, settings, cmd):
        super(Presenter, self).__init__()
        self.settings = settings
        self.cmd = cmd
        self.font = ImageFont.truetype(font='/usr/share/fonts/truetype/dejavu/DejaVuSansMono-Bold.ttf', size=18)
        if self.settings['display']:
            self.display = Display((CAPTURE_WIDTH, CAPTURE_HEIGHT), FPS)

    def proc(self, frame):
        image = Image.frombuffer('RGB', (CAPTURE_WIDTH, CAPTURE_HEIGHT), frame.getvalue(), 'raw', 'RGB')
        self.cmd.update_image(image)  # update `Take Photo` image
        actfw_core.notify([{'test': True}])
        actfw_core.heartbeat()
        if self.settings['display']:
            draw = ImageDraw.Draw(image)
            draw.text((0, 0), 'Hello, Actcast!', font=self.font, fill=(0, 255, 0))
            self.display.update(image)

    def stop(self):
        self.display.stop()
        super(Presenter, self).stop()


def main():

    # Actcast application
    app = actfw_core.Application()

    # Load act setting
    settings = app.get_settings({'display': True})

    # CommandServer (for `Take Photo` command)
    cmd = actfw_core.CommandServer()
    app.register_task(cmd)

    # Capture task
    capture_size = (CAPTURE_WIDTH, CAPTURE_HEIGHT)
    cap = SingleColorCapture()
    app.register_task(cap)

    # Presenter task
    pres = Presenter(settings, cmd)
    app.register_task(pres)

    # Make task connection
    cap.connect(pres)

    # Start application
    app.run()


if __name__ == '__main__':
    from gi.repository import Gst, GObject
    GObject.threads_init()
    Gst.init(None)
    main()
